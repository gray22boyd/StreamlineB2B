[project]
name = "streamlineb2b"
version = "0.1.0"
description = "A comprehensive B2B automation platform with AI-powered customer service agents and marketing automation tools"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "StreamlineB2B Team", email = "team@streamlineb2b.com"}
]
keywords = ["ai", "automation", "customer-service", "marketing", "b2b", "mcp", "rag"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "facebook-business>=23.0.1",
    "fastmcp>=2.11.3",
    "psycopg2-binary>=2.9.10",
    "python-dotenv>=1.1.1",
    "PyPDF2>=3.0.0",
    "PyMuPDF>=1.23.0",
    "sentence-transformers>=2.2.0",
    "chromadb>=0.4.0",
    "spacy>=3.7.0",
    "langchain>=0.1.0",
    "langchain-text-splitters>=0.0.1",
    "tiktoken>=0.5.0",
    "pandas>=2.0.0",
    "requests>=2.31.0",
    "openai>=1.0.0",
    "numpy>=1.24.0",
    "supabase>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0"
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/streamlineb2b"
Documentation = "https://streamlineb2b.readthedocs.io"
Repository = "https://github.com/yourusername/streamlineb2b.git"
Issues = "https://github.com/yourusername/streamlineb2b/issues"
Changelog = "https://github.com/yourusername/streamlineb2b/blob/main/CHANGELOG.md"

[project.scripts]
streamlineb2b = "streamlineb2b.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["agents", "utils"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agents", "utils"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["agents", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
